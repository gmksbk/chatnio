// vite.config.ts
import { defineConfig } from "file:///I:/Projects/chatnio/app/node_modules/.pnpm/vite@4.5.0_@types+node@20.8.9_less@4.2.0/node_modules/vite/dist/node/index.js";
import react from "file:///I:/Projects/chatnio/app/node_modules/.pnpm/@vitejs+plugin-react-swc@3.4.0_vite@4.5.0/node_modules/@vitejs/plugin-react-swc/index.mjs";
import path3 from "path";
import { createHtmlPlugin } from "file:///I:/Projects/chatnio/app/node_modules/.pnpm/vite-plugin-html@3.2.0_vite@4.5.0/node_modules/vite-plugin-html/dist/index.mjs";

// src/translator/translator.ts
import path2 from "path";
import fs2 from "fs";

// src/translator/io.ts
import fs from "fs";
import path from "path";
function readJSON(...paths) {
  return JSON.parse(fs.readFileSync(path.resolve(...paths)).toString());
}
function writeJSON(data, ...paths) {
  fs.writeFileSync(path.resolve(...paths), JSON.stringify(data, null, 2));
}
function getMigration(mother, data, prefix) {
  return Object.keys(mother).map((key) => {
    const template = mother[key], translation = data !== void 0 && key in data ? data[key] : void 0;
    const val = [prefix.length === 0 ? key : `${prefix}.${key}`];
    switch (typeof template) {
      case "string":
        if (typeof translation !== "string")
          return val;
        else if (template.startsWith("!!"))
          return val;
        break;
      case "object":
        return getMigration(template, translation, val[0]);
      default:
        return typeof translation === typeof template ? [] : val;
    }
    return [];
  }).flat().filter((key) => key !== void 0 && key.length > 0);
}
function getFields(data) {
  switch (typeof data) {
    case "string":
      return 1;
    case "object":
      if (Array.isArray(data))
        return data.length;
      return Object.keys(data).reduce(
        (acc, key) => acc + getFields(data[key]),
        0
      );
    default:
      return 1;
  }
}
function getTranslation(data, path4) {
  const keys = path4.split(".");
  let current = data;
  for (const key of keys) {
    if (current[key] === void 0)
      return void 0;
    current = current[key];
  }
  return current;
}
function setTranslation(data, path4, value) {
  const keys = path4.split(".");
  let current = data;
  for (let i = 0; i < keys.length - 1; i++) {
    if (current[keys[i]] === void 0)
      current[keys[i]] = {};
    current = current[keys[i]];
  }
  current[keys[keys.length - 1]] = value;
}

// src/translator/adapter.ts
var languageTranslatorMap = {
  cn: "zh-CN",
  en: "en",
  ru: "ru",
  ja: "ja",
  ko: "ko",
  fr: "fr",
  de: "de",
  es: "es",
  pt: "pt",
  it: "it"
};
function getFormattedLanguage(lang) {
  return languageTranslatorMap[lang.toLowerCase()] || lang;
}
async function translate(text, from, to) {
  if (from === to || text.length === 0)
    return text;
  const resp = await fetch(
    `https://api.mymemory.translated.net/get?q=${encodeURIComponent(
      text
    )}&langpair=${from}|${to}`
  );
  const data = await resp.json();
  return data.responseData.translatedText;
}
function doTranslate(content, from, to) {
  from = getFormattedLanguage(from);
  to = getFormattedLanguage(to);
  if (content.startsWith("!!"))
    content = content.substring(2);
  return translate(content, from, to);
}

// src/translator/translator.ts
var defaultDevLang = "cn";
async function processTranslation(config) {
  const source = path2.resolve(config.root, "src/resources/i18n");
  const files = fs2.readdirSync(source);
  const motherboard = `${defaultDevLang}.json`;
  if (files.length === 0) {
    console.warn("no translation files found");
    return;
  } else if (!files.includes(motherboard)) {
    console.warn(`no default translation file found (${defaultDevLang}.json)`);
    return;
  }
  const data = readJSON(source, motherboard);
  const target = files.filter((file) => file !== motherboard);
  for (const file of target) {
    const lang = file.split(".")[0];
    const translation = { ...readJSON(source, file) };
    const fields = getFields(data);
    const migration = getMigration(data, translation, "");
    const total = migration.length;
    let current = 0;
    for (const key of migration) {
      const from = getTranslation(data, key);
      const to = typeof from === "string" ? await doTranslate(from, defaultDevLang, lang) : from;
      current++;
      console.log(
        `[i18n] successfully translated: ${from} -> ${to} (lang: ${defaultDevLang} -> ${lang}, progress: ${current}/${total})`
      );
      setTranslation(translation, key, to);
    }
    if (migration.length > 0) {
      writeJSON(translation, source, file);
    }
    console.info(
      `translation file ${file} loaded, ${fields} fields detected, ${migration.length} migration(s) applied`
    );
  }
}

// src/translator/index.ts
function createTranslationPlugin() {
  return {
    name: "translate-plugin",
    apply: "build",
    async configResolved(config) {
      try {
        console.info("[i18n] start translation process");
        await processTranslation(config);
      } catch (e) {
        console.warn(`error during translation: ${e}`);
      } finally {
        console.info("[i18n] translation process finished");
      }
    }
  };
}

// vite.config.ts
var __vite_injected_original_dirname = "I:\\Projects\\chatnio\\app";
var vite_config_default = defineConfig({
  plugins: [
    react(),
    createHtmlPlugin({
      minify: true
    }),
    createTranslationPlugin()
  ],
  resolve: {
    alias: {
      "@": path3.resolve(__vite_injected_original_dirname, "./src")
    }
  },
  css: {
    preprocessorOptions: {
      less: {
        javascriptEnabled: true
      }
    }
  },
  build: {
    manifest: true,
    chunkSizeWarningLimit: 2048,
    rollupOptions: {
      output: {
        entryFileNames: `assets/[name].[hash].js`,
        chunkFileNames: `assets/[name].[hash].js`
      }
    }
  },
  server: {
    proxy: {
      "/api": {
        target: "http://localhost:8094",
        changeOrigin: true,
        rewrite: (path4) => path4.replace(/^\/api/, ""),
        ws: true
      },
      "/v1": {
        target: "http://localhost:8094",
        changeOrigin: true
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
